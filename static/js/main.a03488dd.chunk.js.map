{"version":3,"sources":["state/AppContext.js","state/types.js","state/appReducer.js","state/AppState.js","assets/images/cat.png","components/Card/Card.js","components/CardsList/CardsList.js","components/Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","SELECTED_CARD","handlers","state","payload","cards","appReducer","action","type","DEFAULT","AppState","children","useReducer","id","signature","leaveSignature","title","doping","portion","present","weight","text","selected","disable","dispatch","Provider","value","selectingCard","selectedCard","newCards","JSON","parse","stringify","map","card","Card","useContext","useState","mouseLeave","setMouseLeave","cls","push","className","join","onClick","onMouseLeave","style","color","src","photoCat","alt","CardList","Cards","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a03488dd.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const AppContext = createContext()\r\n","export const SELECTED_CARD = 'SELECTED_CARD'\r\n","import { SELECTED_CARD } from './types'\r\n\r\nconst handlers = {\r\n  [SELECTED_CARD]: (state, { payload }) => ({\r\n    ...state,\r\n    cards: payload,\r\n  }),\r\n  DEFAULT: (state) => state,\r\n}\r\n\r\nexport const appReducer = (state, action) => {\r\n  const handler = handlers[action.type] || handlers.DEFAULT\r\n\r\n  return handler(state, action)\r\n}\r\n","import React, { useReducer } from 'react'\r\nimport { AppContext } from './AppContext'\r\nimport { appReducer } from './appReducer'\r\nimport { SELECTED_CARD } from './types'\r\n\r\nfunction AppState({ children }) {\r\n  const initialState = {\r\n    cards: [\r\n      {\r\n        id: 1,\r\n        signature: 'Сказочное заморское явство',\r\n        leaveSignature: 'Котэ не одобряет?',\r\n        title: 'Нямушка',\r\n        doping: 'фуа-гра',\r\n        portion: '10',\r\n        present: 'мышь',\r\n        weight: '0,5',\r\n        text: 'Печень утки разварная с атришоками.',\r\n        selected: false,\r\n        disable: false,\r\n      },\r\n      {\r\n        id: 2,\r\n        signature: 'Сказочное заморское явство',\r\n        leaveSignature: 'Котэ не одобряет?',\r\n        title: 'Нямушка',\r\n        doping: 'рыбой',\r\n        portion: '40',\r\n        present: '2 мыши',\r\n        weight: '2',\r\n        text: 'Головы щучьи с чесноком да свежайшая сёмгушка.',\r\n        selected: false,\r\n        disable: false,\r\n      },\r\n      {\r\n        id: 3,\r\n        signature: 'Сказочное заморское явство',\r\n        leaveSignature: 'Котэ не одобряет?',\r\n        title: 'Нямушка',\r\n        doping: 'курой',\r\n        portion: '100',\r\n        present: '5 мышей',\r\n        weight: '5',\r\n        text: 'Филе из цыплят с трюфелями в бульоне.',\r\n        selected: false,\r\n        disable: true,\r\n      },\r\n    ],\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(appReducer, initialState)\r\n\r\n  const { cards } = state\r\n\r\n  const selectingCard = (selectedCard) => {\r\n    const copyCards = JSON.parse(JSON.stringify(cards))\r\n\r\n    const newCards = copyCards.map((card) => {\r\n      if (card.id === selectedCard.id) {\r\n        card.selected = !card.selected\r\n      }\r\n\r\n      return card\r\n    })\r\n\r\n    dispatch({\r\n      type: SELECTED_CARD,\r\n      payload: newCards,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider value={{ cards, selectingCard }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n\r\nexport default AppState\r\n","export default __webpack_public_path__ + \"static/media/cat.2f2ec3a4.png\";","import React, { useContext, useState } from 'react'\r\nimport { AppContext } from '../../state/AppContext'\r\nimport photoCat from '../../assets/images/cat.png'\r\nimport './Card.scss'\r\n\r\nfunction Card({ children }) {\r\n  const { selectingCard } = useContext(AppContext)\r\n\r\n  const [mouseLeave, setMouseLeave] = useState(false)\r\n\r\n  const {\r\n    signature,\r\n    leaveSignature,\r\n    title,\r\n    doping,\r\n    portion,\r\n    present,\r\n    weight,\r\n    selected,\r\n  } = children\r\n\r\n  const cls = ['card-item']\r\n\r\n  if (children.selected) {\r\n    cls.push('card-item_selected')\r\n  } else if (children.disable) {\r\n    cls.push('card-item_disable')\r\n  }\r\n\r\n  const addListener = () => {\r\n    if (selected) {\r\n      setMouseLeave(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li\r\n      className={cls.join(' ')}\r\n      onClick={() => {\r\n        setMouseLeave(false)\r\n        selectingCard(children)\r\n      }}\r\n      onMouseLeave={addListener}\r\n    >\r\n      <div className='card-description'>\r\n        <span\r\n          className='card-signature'\r\n          style={selected && mouseLeave ? { color: '#d91667' } : {}}\r\n        >\r\n          {selected && mouseLeave ? leaveSignature : signature}\r\n        </span>\r\n        <h2 className='card-title'>{title}</h2>\r\n        <span className='card-doping'>с&nbsp;{doping}</span>\r\n        <div className='card-info'>\r\n          <span className='card-portion'>\r\n            <strong className='card-count'>{portion}</strong>&nbsp;порций\r\n          </span>\r\n          <span className='card-present'>\r\n            <strong className='card-count'>{present}</strong>&nbsp;в подарок\r\n          </span>\r\n          {children.disable ? (\r\n            <span className='card-present'>заказчик доволен</span>\r\n          ) : null}\r\n        </div>\r\n        <div className='card-image'>\r\n          <img src={photoCat} alt='cat' />\r\n        </div>\r\n        <div className='card-circle'>\r\n          <span className='card-weight'>{weight}</span>\r\n          <span className='card-measure'>кг</span>\r\n        </div>\r\n      </div>\r\n      {children.selected ? (\r\n        <span className='card-text'>{children.text}</span>\r\n      ) : children.disable ? (\r\n        <span className='card-text' style={{ color: '#ffff66' }}>\r\n          Печалька, с {doping} закончился\r\n        </span>\r\n      ) : (\r\n        <span className='card-text'>\r\n          Чего сидишь? Порадуй котэ,&nbsp;\r\n          <span className='card-link' onClick={() => selectingCard(children)}>\r\n            купи.\r\n          </span>\r\n        </span>\r\n      )}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { useContext } from 'react'\r\nimport { AppContext } from '../../state/AppContext'\r\nimport Card from '../Card/Card'\r\nimport './CardsList.scss'\r\n\r\nfunction CardList() {\r\n  const { cards } = useContext(AppContext)\r\n\r\n  return (\r\n    <ul className='cards-list'>\r\n      {cards.map((card) => (\r\n        <Card key={card.id}>{card}</Card>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\nimport CardsList from '../CardsList/CardsList'\r\nimport './Cards.scss'\r\n\r\nfunction Cards() {\r\n  return (\r\n    <div className='cards'>\r\n      <h1 className='cards-caption'>Ты сегодня покормил кота?</h1>\r\n      <CardsList />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react'\nimport Cards from './components/Cards/Cards'\nimport './App.scss'\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Cards />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppState from './state/AppState'\nimport App from './App'\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <AppState>\n    <App />\n  </AppState>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}